{"version":3,"sources":["serviceWorker.js","components/Navigation.jsx","components/Post.jsx","components/Feed.jsx","store/actions.js","components/NewPostForm.jsx","components/App.jsx","store/reducers.js","store/api.js","store/sagas.js","store/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Navigation","id","className","to","React","Component","Post","this","props","post","magnet","content","Feed","publications","map","index","key","connect","state","dispatch","feedFetchRequest","cursor","type","saveNextCursor","NewPostForm","text","privateKey","estimated","handleTextChange","bind","handleSubmit","handleKeyChange","event","setState","target","value","publish","createPost","preventDefault","action","method","onSubmit","name","onChange","createPostRequest","App","ended","path","onClick","refreshFeed","uiState","sarafanApp","combineReducers","api","backend_url","console","log","fetchPosts","publishPost","authenticate","url","fetch","resp","json","data","headers","body","JSON","stringify","private_key","watchFetchPosts","watchCreatePost","rootSaga","call","result","item","put","next_cursor","takeLatest","sagas","all","saga","spawn","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kECKSC,G,uLAfX,OACE,yBAAKC,GAAG,cACN,yBAAKC,UAAU,qBACb,0BAAMA,UAAU,QACd,kBAAC,IAAD,CAAMC,GAAG,KAAT,YAIF,kBAAC,IAAD,CAAMA,GAAG,QAAT,kB,GAVeC,IAAMC,YCHVC,E,iLAEjB,OACE,yBAAKJ,UAAU,aACb,oCAAUK,KAAKC,MAAMC,KAAKC,OAA1B,UACA,4CAAkBH,KAAKC,MAAMC,KAAKE,c,GALRP,IAAMC,WCElCO,E,iLAEF,OACE,yBAAKX,GAAG,QACLM,KAAKC,MAAMK,aAAaC,KAAI,SAACL,EAAMM,GAAP,OAC3B,kBAAC,EAAD,CAAMC,IAAKD,EAAON,KAAMA,Y,GALfL,IAAMC,WAyBVY,eAbS,SAAAC,GACtB,MAAO,CACLL,aAAcK,EAAML,iBAGG,SAAAM,GACzB,MAAO,KAOMF,CAA6CL,G,gBCfrD,SAASQ,EAAiBC,GAC/B,MAAO,CAAEC,KAbyB,uBAaGD,UAWhC,SAASE,EAAeF,GAC7B,MAAO,CACLC,KAtByB,gBAuBzBD,U,IC1BEG,E,YACJ,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KACDU,MAAQ,CAACO,KAAM,GAAIC,WAAY,GAAIC,WAAW,GAEnD,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBANN,E,8EAQFG,GACfzB,KAAK0B,SAAL,eAAkB1B,KAAKW,MAAvB,CAA8BO,KAAMO,EAAME,OAAOC,MAAOR,WAAW,O,sCAErDK,GACdzB,KAAK0B,SAAL,eAAkB1B,KAAKW,MAAvB,CAA8BQ,WAAYM,EAAME,OAAOC,W,mCAE5CH,GACPzB,KAAKW,MAAMS,UACbpB,KAAKC,MAAM4B,WAEX7B,KAAKC,MAAM6B,WAAW9B,KAAKW,MAAMO,KAAMlB,KAAKW,MAAMQ,YAClDnB,KAAK0B,SAAL,eAAkB1B,KAAKW,MAAvB,CAA8BS,WAAW,MAE3CK,EAAMM,mB,+BAGN,OACA,yBAAKrC,GAAG,iBACN,0BAAMsC,OAAO,mBAAmBC,OAAO,OAAOC,SAAUlC,KAAKuB,cAC3D,6DACA,8BAAUY,KAAK,OAAOC,SAAUpC,KAAKqB,mBACrC,kDACA,8BAAUc,KAAK,cAAcC,SAAUpC,KAAKwB,kBAC5C,2BAAG,2BAAOT,KAAK,kB,GAhCGlB,IAAMC,WAoDjBY,eAbS,SAAAC,GACtB,MAAO,MAKkB,SAAAC,GACzB,MAAO,CACLkB,WAAY,SAACZ,EAAMC,GAAP,OAAsBP,EDjB/B,SAA2BM,EAAMC,GACtC,MAAO,CACLJ,KA/BiC,wBAgCjCG,KAAMA,EACNC,WAAYA,GCa+BkB,CAAkBnB,EAAMC,KACnEU,QAAS,kBAAMjB,EDTV,CACLG,KAtCkC,+BCkDvBL,CAA6CO,GC1CtDqB,E,sLAEGtC,KAAKC,MAAMsC,OACdvC,KAAKC,MAAMW,SAASC,EAAiBb,KAAKC,MAAMa,W,0CAIlDd,KAAKC,MAAMW,SAASC,EAAiBb,KAAKC,MAAMa,W,+BAGhD,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAKnB,UAAU,qBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6C,KAAK,QACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,MACA,4BAAQC,QAASzC,KAAK0C,YAAYpB,KAAKtB,OAAvC,mB,GApBIH,IAAMC,WAoCTY,eAPS,SAAAC,GACtB,MAAO,CACLG,OAAQH,EAAMgC,QAAQ7B,OACtByB,MAAO5B,EAAMgC,QAAQJ,SAIV7B,CAAyB4B,G,gBCdxC,IAKeM,EALIC,YAAgB,CACjCvC,aA9BF,WAA2C,IAArBK,EAAoB,uDAAZ,GAAIqB,EAAQ,uCACxC,OAAQA,EAAOjB,MACb,IHL2B,kBGMzB,MAAM,GAAN,mBACKJ,GADL,CAEE,CACER,OAAQ6B,EAAO7B,OACfC,QAAS4B,EAAO5B,WAGtB,QACE,OAAOO,IAoBXgC,QAhBF,WAAsC,IAArBhC,EAAoB,uDAAZ,GAAIqB,EAAQ,uCACnC,OAAQA,EAAOjB,MACb,IHjByB,gBGkBvB,IAAIwB,GAASP,EAAOlB,OACpB,OAAO,eACFH,EADL,CAEEG,OAAQkB,EAAOlB,OACfyB,UAEJ,QACE,OAAO5B,M,wCCgCEmC,EAFH,I,WA7DR,WAAYC,GAAc,oBACtBC,QAAQC,IAAI,qBAAsBF,GAClC/C,KAAK+C,YAAcA,EACnB/C,KAAKkD,WAAalD,KAAKkD,WAAW5B,KAAKtB,MACvCA,KAAK8B,WAAa9B,KAAK8B,WAAWR,KAAKtB,MACvCA,KAAKmD,YAAcnD,KAAKmD,YAAY7B,KAAKtB,MACzCA,KAAKoD,aAAepD,KAAKoD,aAAa9B,KAAKtB,M,gGAE9Bc,G,kFACTuC,EAAMrD,KAAK+C,YAAc,YACzBjC,IACAuC,GAAO,WAAavC,G,SAELwC,MAAMD,EAAK,CAAEpB,OAAQ,Q,cAAlCsB,E,gBACaA,EAAKC,O,cAAlBC,E,yBACCA,G,iLAEMvC,EAAMC,G,gFACfsC,EAAO,CACPvC,KAAMA,EACNC,WAAYA,G,SAEGmC,MAAMtD,KAAK+C,YAAc,kBAAmB,CAC3Dd,OAAQ,OACRyB,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUJ,K,cALnBF,E,gBAOOA,EAAKC,O,4NAEJrD,EAAQgB,G,gFAChBsC,EAAO,CACTtD,OAAQA,EACRgB,WAAYA,G,SAEGmC,MAAMtD,KAAK+C,YAAc,cAAe,CACvDd,OAAQ,OACRyB,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUJ,K,cALnBF,E,gBAOOA,EAAKC,O,6NAGHM,G,gFACTL,EAAO,CACTK,YAAaA,G,SAEER,MAAMtD,KAAK+C,YAAc,mBAAoB,CAC5Dd,OAAQ,OACRyB,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUJ,K,cALnBF,E,gBAOOA,EAAKC,O,sJAId,CAAsB,0B,WCpDxBN,G,WASApB,G,WASAiC,G,WAIAC,G,WAIOC,GA1BjB,SAAUf,EAAWlB,GAArB,qFAEe,OADPlB,EAASkB,EAAOlB,OADxB,SAEqBoD,YAAKpB,EAAII,WAAYpC,GAF1C,OAEQyC,EAFR,qCAGmBA,EAAKY,OAHxB,kEAII,OADOC,EAHX,kBAIUC,aLKclE,EKLFiE,EAAKjE,OLKKC,EKLGgE,EAAKhE,QLM/B,CACLW,KAjB2B,kBAkB3BZ,OAAQA,EACRC,QAASA,KKbb,6QAME,OANF,UAMQiE,YAAIrD,EAAeuC,EAAKe,cANhC,kCLSO,IAAiBnE,EAAQC,IKThC,mCASA,SAAU0B,EAAWE,EAAQb,GAA7B,uEACe,OADf,SACqB+C,YAAKpB,EAAIhB,WAAYE,EAAOd,KAAMc,EAAOb,YAD9D,OACQoC,EADR,OAEEP,QAAQC,IAAI,eAAgBM,GAF9B,uCASA,SAAUQ,IAAV,iEACE,OADF,SACQQ,YL1B4B,uBK0BKrB,GADzC,uCAIA,SAAUc,IAAV,iEACE,OADF,SACQO,YL5B6B,wBK4BKzC,GAD1C,uCAIO,SAAUmC,IAAV,uEAML,OALMO,EAAQ,CACVT,EACAC,GAHC,SAMCS,YAAID,EAAMjE,KAAI,SAAAmE,GAAI,OACtBC,YAAK,UAAC,8EAGA,OAHA,kBAGMT,YAAKQ,GAHX,mEAMA1B,QAAQC,IAAR,MANA,oFAPH,uCC/BP,IAAM2B,EAAiBC,cACVC,EAAQC,YACjBnC,EACAoC,YAAgBJ,IAEpBA,EAAeK,IAAIhB,GCFnBiB,IAASC,OAAO,kBAAC,IAAD,CAAUL,MAAOA,GAC7B,kBAAC,EAAD,OACWM,SAASC,cAAc,UXyHhC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.76207759.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Navigation.css';\n\n\nclass Navigation extends React.Component {\n  render() {\n    return (\n      <div id=\"navigation\">\n        <div className=\"content_container\">\n          <span className=\"logo\">\n            <Link to=\"/\">\n              Sarafan\n            </Link>\n          </span>\n          <Link to=\"/new\">new post</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Navigation;\n","import React from 'react';\n\n\nexport default class Post extends React.Component {\n  render() {\n    return (\n      <div className=\"feed_post\">\n        <h1>Post {this.props.post.magnet} title</h1>\n        <p>Post content: {this.props.post.content}</p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Post from './Post';\nimport { connect } from \"react-redux\";\n\n\nclass Feed extends React.Component {\n  render() {\n    return (\n      <div id=\"feed\">\n        {this.props.publications.map((post, index) => (\n          <Post key={index} post={post} />\n        ))}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    publications: state.publications\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    // onTodoClick: id => {\n    //   dispatch(toggleTodo(id))\n    // }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feed)\n","/*\n * action types\n */\nexport const FEED_FETCH_REQUESTED = 'FEED_FETCH_REQUESTED';\nexport const ADD_PUBLICATION = 'ADD_PUBLICATION';\nexport const CREATE_POST_REQUESTED = 'CREATE_POST_REQUESTED';\nexport const PUBLISH_ESTIMATED_POST = 'PUBLISH_ESTIMATED_POST';\nexport const UPDATE_CURSOR = 'UPDATE_CURSOR';\n/*\n * other constants\n */\n\n/*\n * action creators\n */\nexport function feedFetchRequest(cursor) {\n  return { type: FEED_FETCH_REQUESTED, cursor }\n}\n\nexport function addPost(magnet, content) {\n  return {\n    type: ADD_PUBLICATION,\n    magnet: magnet,\n    content: content,\n  }\n}\n\nexport function saveNextCursor(cursor) {\n  return {\n    type: UPDATE_CURSOR,\n    cursor,\n  }\n}\n\nexport function createPostRequest(text, privateKey) {\n  return {\n    type: CREATE_POST_REQUESTED,\n    text: text,\n    privateKey: privateKey,\n  }\n}\n\nexport function publishEstimatedPost() {\n  return {\n    type: PUBLISH_ESTIMATED_POST,\n  }\n}\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { createPostRequest, publishEstimatedPost } from \"../store/actions\";\n\nclass NewPostForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {text: '', privateKey: '', estimated: false}\n\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleKeyChange = this.handleKeyChange.bind(this);\n  }\n  handleTextChange(event) {\n    this.setState({...this.state, text: event.target.value, estimated: false});\n  }\n  handleKeyChange(event) {\n    this.setState({...this.state, privateKey: event.target.value});\n  }\n  handleSubmit(event) {\n    if (this.state.estimated) {\n      this.props.publish()\n    } else {\n      this.props.createPost(this.state.text, this.state.privateKey);\n      this.setState({...this.state, estimated: true});\n    }\n    event.preventDefault();\n  }\n  render() {\n    return (\n    <div id=\"new_post_form\">\n      <form action=\"/api/create_post\" method=\"post\" onSubmit={this.handleSubmit}>\n        <p>Create new post from markdown:</p>\n        <textarea name=\"text\" onChange={this.handleTextChange}></textarea>\n        <p>Private key to use:</p>\n        <textarea name=\"private_key\" onChange={this.handleKeyChange}></textarea>\n        <p><input type=\"submit\" /></p>\n      </form>\n    </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { \n    // todoList: todos.allIds \n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createPost: (text, privateKey) => dispatch(createPostRequest(text, privateKey)),\n    publish: () => dispatch(publishEstimatedPost()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPostForm);\n","import React from 'react';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport { connect } from 'react-redux'\n\nimport Navigation from './Navigation';\nimport Feed from './Feed';\nimport NewPostForm from './NewPostForm';\nimport { feedFetchRequest } from \"../store/actions\";\n\nclass App extends React.Component {\n  refreshFeed() {\n    if (!this.props.ended) {\n      this.props.dispatch(feedFetchRequest(this.props.cursor));\n    }\n  }\n  componentDidMount() {\n    this.props.dispatch(feedFetchRequest(this.props.cursor));\n  }\n  render() {\n    return (\n      <Router>\n        <Navigation />\n        <div className=\"content_container\">\n          <Switch>\n            <Route path=\"/new\">\n              <NewPostForm />\n            </Route>\n            <Route path=\"/\">\n              <Feed />\n              <button onClick={this.refreshFeed.bind(this)}>refresh</button>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cursor: state.uiState.cursor,\n    ended: state.uiState.ended,\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from 'redux'\n\nimport {\n  ADD_PUBLICATION,\n  UPDATE_CURSOR,\n} from './actions'\n\nfunction publications(state = [], action) {\n  switch (action.type) {\n    case ADD_PUBLICATION:\n      return [\n        ...state,\n        {\n          magnet: action.magnet,\n          content: action.content,\n        }\n      ]\n    default:\n      return state\n  }\n}\n\nfunction uiState(state = {}, action) {\n  switch (action.type) {\n    case UPDATE_CURSOR:\n      let ended = !action.cursor;\n      return {\n        ...state,\n        cursor: action.cursor,\n        ended\n      }\n    default:\n      return state\n  }\n}\n\nconst sarafanApp = combineReducers({\n  publications,\n  uiState,\n});\n\nexport default sarafanApp","class SarafanAppBackend {\n    constructor(backend_url) {\n        console.log(\"Start with backend\", backend_url)\n        this.backend_url = backend_url\n        this.fetchPosts = this.fetchPosts.bind(this);\n        this.createPost = this.createPost.bind(this);\n        this.publishPost = this.publishPost.bind(this);\n        this.authenticate = this.authenticate.bind(this);\n    }\n    async fetchPosts(cursor) {\n        let url = this.backend_url + 'api/posts';\n        if (cursor) {\n            url += '?cursor=' + cursor\n        }\n        const resp = await fetch(url, { method: \"GET\" })\n        const data = await resp.json()\n        return data\n    }\n    async createPost(text, privateKey) {\n        let data = {\n            text: text,\n            privateKey: privateKey\n        }\n        const resp = await fetch(this.backend_url + 'api/create_post', { \n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n        return await resp.json();\n    }\n    async publishPost(magnet, privateKey) {\n        const data = {\n            magnet: magnet,\n            privateKey: privateKey,\n        }\n        const resp = await fetch(this.backend_url + 'api/publish', { \n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n        return await resp.json();\n    }\n\n    async authenticate(private_key) {\n        const data = {\n            private_key: private_key\n        }\n        const resp = await fetch(this.backend_url + 'api/authenticate', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n        return await resp.json()\n    }\n}\n\nconst api = new SarafanAppBackend(\"http://localhost:9231/\");\n\nexport default api;\n","import { \n  FEED_FETCH_REQUESTED, \n  CREATE_POST_REQUESTED, \n  PUBLISH_ESTIMATED_POST,\n} from \"./actions\";\nimport { call, all, put, spawn, takeLatest, take  } from \"redux-saga/effects\";\nimport { addPost, saveNextCursor } from \"../store/actions\";\nimport api from \"./api\";\n\n\nfunction* fetchPosts(action) {\n  const cursor = action.cursor;\n  const resp = yield call(api.fetchPosts, cursor);\n  for (let item of resp.result) {\n    yield put(addPost(item.magnet, item.content));\n  }\n  yield put(saveNextCursor(resp.next_cursor))\n}\n\nfunction* createPost(action, privateKey) {\n  const resp = yield call(api.createPost, action.text, action.privateKey);\n  console.log(\"Created post\", resp);\n  // yield take(PUBLISH_ESTIMATED_POST);\n  // console.log(\"Need to publish\", resp);\n  // const resp2 = yield call(api.publishPost, resp.magnet, action.privateKey);\n  // console.log(\"Second response received\", resp2);\n}\n\nfunction* watchFetchPosts() {\n  yield takeLatest(FEED_FETCH_REQUESTED, fetchPosts);\n}\n\nfunction* watchCreatePost() {\n  yield takeLatest(CREATE_POST_REQUESTED, createPost);\n}\n\nexport function* rootSaga () {\n  const sagas = [\n      watchFetchPosts,\n      watchCreatePost,\n  ];\n\n  yield all(sagas.map(saga =>\n    spawn(function* () {\n      while (true) {\n        try {\n          yield call(saga);\n          break;\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    }))\n  );\n}\n","import { createStore, applyMiddleware } from 'redux'\nimport sarafanApp from './reducers'\nimport createSagaMiddleware from 'redux-saga'\nimport { rootSaga } from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware()\nexport const store = createStore(\n    sarafanApp,\n    applyMiddleware(sagaMiddleware)\n)\nsagaMiddleware.run(rootSaga)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport App from './components/App';\nimport { store } from './store';\n\nReactDOM.render(<Provider store={store}>\n    <App />\n  </Provider>, document.querySelector('#root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}